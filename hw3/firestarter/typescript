Script started on 2021-09-22 15:19:37-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;djv78@maroon34: ~/Documents/GitHub/CS374Work/hw3/firestarter[01;32mdjv78@maroon34[00m:[01;34m~/Documents/GitHub/CS374Work/hw3/firestarter[00m$ cat firestarter.c
/* firestarter.c 
 * David Joiner
 * Usage: Fire [forestSize(20)] [numTrials(5000)] * [numProbabilities(101)] [showGraph(1)]
 * Monte Carlo Simulaiton of a forest fire.
 * Modified (paralellized) by Duncan Van Keulen for 
 * CS 374 High Performance Computing Project 3
 * Calvin University
 * 17 September 2021
 */
#include <stdio.h>
#include <stdlib.h>
#include "X-graph.h"
#include <mpi.h>
#include <string.h>

#define UNBURNT 0
#define SMOLDERING 1
#define BURNING 2
#define BURNT 3

#define true 1
#define false 0

typedef int boolean;

extern void seed_by_time(int);
extern int ** allocate_forest(int);
extern void initialize_forest(int, int **);
extern double get_percent_burned(int, int **);
extern void delete_forest(int, int **);
extern void light_tree(int, int **,int,int);
extern boolean forest_is_burning(int, int **);
extern void forest_burns(int, int **,double);
extern int burn_until_out(int,int **,double,int,int);
extern void print_forest(int, int **);

int main(int argc, char ** argv) {
    // initial conditions and variable definitions
    int forest_size=20;
    double * prob_spread;
    double prob_min=0.0;
    double prob_max=1.0;
    double prob_step;
    int **forest;
    double * percent_burned;
    double * iterations;
    double * avg_iterations;
    double * avg_percent_burned;
    int i_trial;
    int n_trials=5000;
    int i_prob;
    int n_probs=101;
    int do_display=1;
    xgraph thegraph;

    // init MPI resources
    int id = -1, numProcesses = -1, length = -1; 
    MPI_Status status;
    char hostName[MPI_MAX_PROCESSOR_NAME];
    double startTime = 0.0, totalTime = 0.0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &id);
    MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);
    MPI_Get_processor_name (hostName, &length);

    // check command line arguments

    if (argc > 1) {
        sscanf(argv[1],"%d",&forest_size);
    }
    if (argc > 2) {
        sscanf(argv[2],"%d",&n_trials);
    }
    if (argc > 3) {
        sscanf(argv[3],"%d",&n_probs);
    }
    if (argc > 4) {
        sscanf(argv[4],"%d",&do_display);
    }
    if (do_display!=0) do_display=1;

    // setup problem
    seed_by_time(0);
    forest=allocate_forest(forest_size);

    // create arrays of size 101 doubles to store the 
    prob_spread = (double *) malloc (n_probs*sizeof(double));
    percent_burned = (double *) malloc (n_probs*sizeof(double));
    iterations = (double *) malloc (n_probs*sizeof(double));
    avg_iterations = (double *) malloc (n_probs*sizeof(double));
    avg_percent_burned = (double *) malloc (n_probs*sizeof(double));

    // for a number of probabilities, calculate
    // average burn and output
    prob_step = (prob_max-prob_min)/(double)(n_probs-1);
    if (id == 0) printf("Probability of fire spreading, Average percent burned\n");

    startTime = MPI_Wtime();

    // initialize arrays 
    for (int i = 0; i < n_probs; i++) {
        percent_burned[i] = iterations[i] = 0.0;
        prob_spread[i] = prob_min + (double)i * prob_step;
    }

    // parallel loop through each trial and prob within each trial
    for (i_trial=id; i_trial < n_trials; i_trial += numProcesses) {
        for (i_prob = 0 ; i_prob < n_probs; i_prob++) {

            //burn until fire is gone and keep sum of iterations
            iterations[i_prob] += burn_until_out(forest_size,forest,prob_spread[i_prob],
                forest_size/2,forest_size/2);

            // keep sum of probabilities
            percent_burned[i_prob] += get_percent_burned(forest_size,forest);
        }
    }

    // reduce all the iterations and percent_burned values into arrays
    MPI_Reduce(iterations, avg_iterations, n_probs, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    MPI_Reduce(percent_burned, avg_percent_burned, n_probs, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    // average arrays by dividing by numer of probabilities
    for (i_prob = 0; i_prob < n_probs; i_prob++) {
       avg_percent_burned[i_prob] /= n_trials;
       avg_iterations[i_prob] /= n_trials;
    }

    // calculate total time
    totalTime = MPI_Wtime() - startTime;

    // print out values
    if (id == 0) {
        for (i_prob = 0; i_prob < n_probs; i_prob++) {
            // print output
            // printf("%lf , %lf , %lf\n",prob_spread[i_prob], avg_percent_burned[i_prob], avg_iterations[i_prob]);
            // printf("%lf\n", avg_percent_burned[i_prob]);
            printf("%lf\n", avg_iterations[i_prob]);
        }
        printf("Total time: %f\n", totalTime);
    }

    // plot graph
    // if (id == 0 && do_display==1) {
    //     xgraphSetup(&thegraph,300,300);
    //     xgraphDraw(&thegraph,n_probs,0,0,1,1,prob_spread,percent_burned);
    //     pause();
    // }

    // clean up
    MPI_Finalize();
    delete_forest(forest_size,forest);
    free(prob_spread);
    free(percent_burned);
    free(iterations);
    free(avg_iterations);
    free(avg_percent_burned);
    return 0;
}

#include <time.h>

void seed_by_time(int offset) {
    time_t the_time;
    time(&the_time);
    srand((int)the_time+offset);
}

int burn_until_out(int forest_size,int ** forest, double prob_spread,
    int start_i, int start_j) {
    int count;

    initialize_forest(forest_size,forest);
    light_tree(forest_size,forest,start_i,start_j);

    // burn until fire is gone
    count = 0;
    while(forest_is_burning(forest_size,forest)) {
        forest_burns(forest_size,forest,prob_spread);
        count++;
    }

    return count;
}

double get_percent_burned(int forest_size,int ** forest) {
    int i,j;
    int total = forest_size*forest_size-1;
    int sum=0;

    // calculate pecrent burned
    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                sum++;
            }
        }
    }

    // return percent burned;
    return ((double)(sum-1)/(double)total);
}


int ** allocate_forest(int forest_size) {
    int i;
    int ** forest;

    forest = (int **) malloc (sizeof(int*)*forest_size);
    for (i=0;i<forest_size;i++) {
        forest[i] = (int *) malloc (sizeof(int)*forest_size);
    }

    return forest;
}

void initialize_forest(int forest_size, int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            forest[i][j]=UNBURNT;
        }
    }
}

void delete_forest(int forest_size, int ** forest) {
    int i;

    for (i=0;i<forest_size;i++) {
        free(forest[i]);
    }
    free(forest);
}

void light_tree(int forest_size, int ** forest, int i, int j) {
    forest[i][j]=SMOLDERING;
}

boolean fire_spreads(double prob_spread) {
    if ((double)rand()/(double)RAND_MAX < prob_spread) 
        return true;
    else
        return false;
}

void forest_burns(int forest_size, int **forest,double prob_spread) {
    int i,j;
    extern boolean fire_spreads(double);

    //burning trees burn down, smoldering trees ignite
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) forest[i][j]=BURNT;
            if (forest[i][j]==SMOLDERING) forest[i][j]=BURNING;
        }
    }

    //unburnt trees catch fire
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) {
                if (i!=0) { // North
                    if (fire_spreads(prob_spread)&&forest[i-1][j]==UNBURNT) {
                        forest[i-1][j]=SMOLDERING;
                    }
                }
                if (i!=forest_size-1) { //South
                    if (fire_spreads(prob_spread)&&forest[i+1][j]==UNBURNT) {
                        forest[i+1][j]=SMOLDERING;
                    }
                }
                if (j!=0) { // West
                    if (fire_spreads(prob_spread)&&forest[i][j-1]==UNBURNT) {
                        forest[i][j-1]=SMOLDERING;
                    }
                }
                if (j!=forest_size-1) { // East
                    if (fire_spreads(prob_spread)&&forest[i][j+1]==UNBURNT) {
                        forest[i][j+1]=SMOLDERING;
                    }
                }
            }
        }
    }
}

boolean forest_is_burning(int forest_size, int ** forest) {
    int i,j;

    for (i=0; i<forest_size; i++) {
        for (j=0; j<forest_size; j++) {
            if (forest[i][j]==SMOLDERING||forest[i][j]==BURNING) {
                return true;
            }
        }
    }
    return false;
}

void print_forest(int forest_size,int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                printf(".");
            } else {
                printf("X");
            }
        }
        printf("\n");
    }
}
]0;djv78@maroon34: ~/Documents/GitHub/CS374Work/hw3/firestarter[01;32mdjv78@maroon34[00m:[01;34m~/Documents/GitHub/CS374Work/hw3/firestarter[00m$ make
make: 'Fire' is up to date.

#### This is my 20x20 fire simulation slurm.out file ####

]0;djv78@maroon34: ~/Documents/GitHub/CS374Work/hw3/firestarter[01;32mdjv78@maroon34[00m:[01;34m~/Documents/GitHub/CS374Work/hw3/firestarter[00m$ cat slurm-198461.out
t 
Probability of fire spreading, Average percent burned
0.000000 , 0.000000 , 2.000000
0.010000 , 0.000072 , 2.028800
0.020000 , 0.000184 , 2.073600
0.030000 , 0.000305 , 2.118400
0.040000 , 0.000585 , 2.214400
0.050000 , 0.000602 , 2.233600
0.060000 , 0.000826 , 2.291200
0.070000 , 0.001151 , 2.401600
0.080000 , 0.000994 , 2.364800
0.090000 , 0.001059 , 2.374400
0.100000 , 0.001251 , 2.441600
0.110000 , 0.001512 , 2.529600
0.120000 , 0.001941 , 2.638400
0.130000 , 0.002113 , 2.715200
0.140000 , 0.002346 , 2.760000
0.150000 , 0.002863 , 2.902400
0.160000 , 0.003064 , 2.972800
0.170000 , 0.003649 , 3.107200
0.180000 , 0.004094 , 3.256000
0.190000 , 0.004042 , 3.177600
0.200000 , 0.004138 , 3.224000
0.210000 , 0.005237 , 3.488000
0.220000 , 0.005774 , 3.548800
0.230000 , 0.006031 , 3.646400
0.240000 , 0.006829 , 3.793600
0.250000 , 0.009359 , 4.323200
0.260000 , 0.008618 , 4.260800
0.270000 , 0.010747 , 4.544000
0.280000 , 0.012287 , 4.974400
0.290000 , 0.013879 , 5.070400
0.300000 , 0.013758 , 5.075200
0.310000 , 0.017147 , 5.446400
0.320000 , 0.020223 , 6.075200
0.330000 , 0.020968 , 6.238400
0.340000 , 0.030268 , 7.846400
0.350000 , 0.028776 , 7.302400
0.360000 , 0.038067 , 8.187200
0.370000 , 0.041079 , 8.444800
0.380000 , 0.040461 , 8.472000
0.390000 , 0.056710 , 9.985600
0.400000 , 0.073496 , 12.097600
0.410000 , 0.082462 , 12.526400
0.420000 , 0.092371 , 13.137600
0.430000 , 0.121528 , 15.278400
0.440000 , 0.132251 , 15.846400
0.450000 , 0.167575 , 18.504000
0.460000 , 0.179621 , 18.563200
0.470000 , 0.239563 , 21.934400
0.480000 , 0.294051 , 24.158400
0.490000 , 0.344241 , 25.547200
0.500000 , 0.380295 , 27.120000
0.510000 , 0.423555 , 27.675200
0.520000 , 0.498643 , 30.628800
0.530000 , 0.532018 , 30.030400
0.540000 , 0.545127 , 29.376000
0.550000 , 0.656136 , 32.633600
0.560000 , 0.689760 , 32.568000
0.570000 , 0.751342 , 32.488000
0.580000 , 0.767844 , 31.099200
0.590000 , 0.788479 , 29.624000
0.600000 , 0.835894 , 30.350400
0.610000 , 0.842943 , 28.939200
0.620000 , 0.892988 , 29.057600
0.630000 , 0.910621 , 28.897600
0.640000 , 0.914326 , 27.534400
0.650000 , 0.903739 , 26.212800
0.660000 , 0.928313 , 25.932800
0.670000 , 0.938895 , 25.352000
0.680000 , 0.957373 , 25.228800
0.690000 , 0.961163 , 24.776000
0.700000 , 0.962667 , 24.292800
0.710000 , 0.968000 , 24.139200
0.720000 , 0.982564 , 23.958400
0.730000 , 0.978129 , 23.374400
0.740000 , 0.975595 , 23.222400
0.750000 , 0.978839 , 22.921600
0.760000 , 0.990143 , 22.881600
0.770000 , 0.992000 , 23.036800
0.780000 , 0.989726 , 22.561600
0.790000 , 0.994466 , 22.592000
0.800000 , 0.992333 , 22.504000
0.810000 , 0.996383 , 22.416000
0.820000 , 0.996704 , 22.382400
0.830000 , 0.996736 , 22.256000
0.840000 , 0.997883 , 22.276800
0.850000 , 0.998240 , 22.233600
0.860000 , 0.998745 , 22.219200
0.870000 , 0.998733 , 22.128000
0.880000 , 0.999118 , 22.118400
0.890000 , 0.999407 , 22.057600
0.900000 , 0.999483 , 22.089600
0.910000 , 0.996487 , 21.980800
0.920000 , 0.999767 , 22.028800
0.930000 , 0.999808 , 22.016000
0.940000 , 0.999928 , 22.032000
0.950000 , 0.999984 , 22.028800
0.960000 , 0.999968 , 22.019200
0.970000 , 0.999984 , 22.028800
0.980000 , 0.999984 , 22.000000
0.990000 , 0.999984 , 22.000000
1.000000 , 1.000000 , 22.000000
Total time: 0.187597
]0;djv78@maroon34: ~/Documents/GitHub/CS374Work/hw3/firestarter[01;32mdjv78@maroon34[00m:[01;34m~/Documents/GitHub/CS374Work/hw3/firestarter[00m$ [Kexit

Script done on 2021-09-22 15:20:16-04:00 [COMMAND_EXIT_CODE="0"]
