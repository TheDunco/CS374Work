Script started on 2021-10-11 16:39:49-04:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="132" LINES="30"]
]0;djv78@maroon33: ~/Documents/GitHub/CS374Work/lab5[01;32mdjv78@maroon33[00m:[01;34m~/Documents/GitHub/CS374Work/lab5[00m$ ls
 [0m[01;32mcalcPI[0m     calcPI.o      hosts           integral.c   integral.o   Makefile        typescript
 calcPI.c   [01;32mgenHosts.pl[0m  'HW5 Data.ods'   integral.h   [01;34mlab5[0m         Makefile_borg
]0;djv78@maroon33: ~/Documents/GitHub/CS374Work/lab5[01;32mdjv78@maroon33[00m:[01;34m~/Documents/GitHub/CS374Work/lab5[00m$ cat h[Kintegral.h
/* integral.h declares integral, a function to calculate
 *  definite integrals using the trapezoidal rule.
 *
 * Joel Adams, Fall 2013 for CS 374 at Calvin College.
 * 
 * Edited by Duncan Van Keulen at Calvin University for
 * High Performance Computing Homework 5
 * 11 October 2021
 */

long double integrateTrap(double xLo, double xHi,
                          unsigned long long numTrapezoids, int id, int numProcs, long double delta);

]0;djv78@maroon33: ~/Documents/GitHub/CS374Work/lab5[01;32mdjv78@maroon33[00m:[01;34m~/Documents/GitHub/CS374Work/lab5[00m$ cat integral.c
/* integral.c defines integrateTrap(), a function to approximate
 *  definite integrals using the trapezoidal rule. 
 *
 * Joel Adams, Fall 2013.
 * 
 * Parallelized using sclices by Duncan Van Keulen at Calvin University for 
 * High Performance Computing Homework 5
 * 11 October 2021
 */

#include "integral.h"
#include "advisor-annotate.h"



/* declaration of the function to be integrated,
 * which must be defined in the caller of integrate()
 * or a linking error will occur
 */
extern double f(double x); 

/* function to approximate an integral:
 * parameters: xLo, the left endpoint
 *             xHi, the right endpoint
 *             numTrapezoids, the number of trapezoids to use
 * return: the approximate integral of f(x) from x1 to x2.
 */
long double integrateTrap(double xLo, double xHi,
                          unsigned long long numTrapezoids,
                          int id, int numProcs, long double delta) {
   long double result = 0;
   unsigned long long i = 0;

   if (id == 0) {
    result = (f(xLo) + f(xHi)) * 0.5;
   }
   
  //  ANNOTATE_SITE_BEGIN("integrateTrap");
   for (i = id + 1; i < numTrapezoids; i += numProcs) {
    //  ANNOTATE_ITERATION_TASK("result")
     result += f(xLo + i*delta);
   }
   
  //  ANNOTATE_SITE_END("integrateTrap")

   return result;
} 

/* Note: The integral is approximately
 *   delta * (f(xLo) + f(x1)) / 2
 * + delta * (f(x1) + f(x2)) / 2
 * + delta * (f(x2) + f(x3)) / 2
 * ...
 * + delta * (f(x[n-2] + f(x[n-1]) / 2
 * + delta * (f(x[n-1]) + f(x[n])) / 2
 */

]0;djv78@maroon33: ~/Documents/GitHub/CS374Work/lab5[01;32mdjv78@maroon33[00m:[01;34m~/Documents/GitHub/CS374Work/lab5[00m$ cat calcPI.c
/* calcPi.c calculates PI using the integral of the unit circle.
 * Since the area of the unit circle is PI, 
 *  PI = 4 * the area of a quarter of the unit circle 
 *    (i.e., its integral from 0.0 to 1.0)
 *
 * Joel Adams, Fall 2013 for CS 374 at Calvin College.
 * 
 * Parallelized using sclices by Duncan Van Keulen at Calvin University for 
 * High Performance Computing Homework 5
 * 11 October 2021
 * 
 */

#include "integral.h"   // integrate()
#include <stdio.h>      // printf(), etc.
#include <stdlib.h>     // exit()
#include <math.h>       // sqrt() 
#include <mpi.h>



/* function for unit circle (x^2 + y^2 = 1)
 * parameter: x, a double
 * return: sqrt(1 - x^2)
 */
double f(double x) {
   return sqrt(1.0 - x*x);
}

/* retrieve desired number of trapezoids from commandline arguments
 * parameters: argc: the argument count
 *             argv: the argument vector
 * return: the number of trapezoids to be used.
 */            
unsigned long long processCommandLine(int argc, char** argv) {
   if (argc == 1) {
       return 1;
   } else if (argc == 2) {
//       return atoi( argv[1] );
       return strtoull( argv[1], 0, 10 );
   } else {
       fprintf(stderr, "Usage: ./calcPI [numTrapezoids]");
       exit(1);
   }
}
 

int main(int argc, char** argv) {
   double startTime, endTime;
   int id, numProcs;
   long double finalPI = 0;
   long double approximatePI = 0;
   long double delta;
   const long double REFERENCE_PI = 3.141592653589793238462643383279L;
   unsigned long long numTrapezoids = processCommandLine(argc, argv); 
   MPI_Init(&argc, &argv);
   MPI_Comm_rank(MPI_COMM_WORLD, &id);
   MPI_Comm_size(MPI_COMM_WORLD, &numProcs);
   startTime = MPI_Wtime();

   // delta now calc'd here for MPI reduce
   delta = 1.0 / numTrapezoids;
   
   approximatePI = integrateTrap(0.0, 1.0, numTrapezoids, id, numProcs, delta);
   
   MPI_Reduce(&approximatePI, &finalPI, 1, MPI_LONG_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
   
   if (id == 0) {
      // we factor the delta out of the operation and passed it in as a variable instead
      finalPI *= (4.0 * delta);
      endTime = MPI_Wtime() - startTime;

      printf("Using %llu trapezoids, the approximate vs actual values of PI are:\n%.30Lf\n%.30Lf\nProgram took %f seconds to run\n",
            numTrapezoids, finalPI, REFERENCE_PI, endTime);
   }
           
   MPI_Finalize();

   return 0;
}

]0;djv78@maroon33: ~/Documents/GitHub/CS374Work/lab5[01;32mdjv78@maroon33[00m:[01;34m~/Documents/GitHub/CS374Work/lab5[00m$ mpirun -np 128 [K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kmake
make: 'calcPI' is up to date.
]0;djv78@maroon33: ~/Documents/GitHub/CS374Work/lab5[01;32mdjv78@maroon33[00m:[01;34m~/Documents/GitHub/CS374Work/lab5[00m$ mpr[Kirun -np 128 -n[Kmachinefile hosts ./calcPI 1000000000000
Using 1000000000000 trapezoids, the approximate vs actual values of PI are:
3.141592653589793273640959347937
3.141592653589793238512808959406
Program took 44.605896 seconds to run
]0;djv78@maroon33: ~/Documents/GitHub/CS374Work/lab5[01;32mdjv78@maroon33[00m:[01;34m~/Documents/GitHub/CS374Work/lab5[00m$ exit

Script done on 2021-10-11 16:42:02-04:00 [COMMAND_EXIT_CODE="0"]
